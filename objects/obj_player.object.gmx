<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///main char should instantiate all required controllers.
//or pull this into one demi-god object.
instance_create(x,y,obj_cards);
instance_create(x,y,obj_inv);
instance_create(x,y,obj_enemies);

//actual player creation code
image_speed = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controls
key_one = keyboard_check_pressed(ord("1"));
key_two = keyboard_check_pressed(ord("2")) * 2;
key_three = keyboard_check_pressed(ord("3")) * 3;
key_four = keyboard_check_pressed(ord("4")) * 4;

inv_key_pressed = key_one + key_two + key_three + key_four;

if (inv_key_pressed &gt; 0) {
    obj_inv.card_at_slot[inv_key_pressed - 1].played = true;    
}

with (obj_enemies) {
    if (!ds_list_empty(active)) {
        dist = 600;
        for (index = 0; index &lt; ds_list_size(active); index++) {
            a2 = sqr(obj_player.x - active[| index].x);
            b2 = sqr(obj_player.y - active[| index].y);
            new_dist = sqrt(a2 + b2);
                        
            if (new_dist &lt; dist) {
                dist = new_dist;
                closest_enemy = active[| index];
            }
        }
    }
}
move_towards_point(mouse_x, mouse_y, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>54,73</point>
    <point>74,74</point>
  </PhysicsShapePoints>
</object>
