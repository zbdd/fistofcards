<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare new conduit
status = "sleep";

enemies = ds_list_create(); // 0 refers to selected enemy.
pool = ds_list_create(); // Available cards.
nodes = ds_list_create(); // Chained cards.
adj = ds_list_create(); // Adjaceny graph.
attacks = ds_list_create(); // Combined attacks.

HAND_SIZE = 3;
in_hand = 0;
in_deck = ds_list_size(pool);
in_discard = 0;
action_points = 1;
run_once = true;
selectedattack = -1;

// For the chains graph.
top = -1;
right = -1;
bottom = -1;
left = -1;

// Debugging.
drawn = 0;
select = instance_create(x, y, o_select);
select.image_xscale = 0.5;
select.image_yscale = 0.5;
move_by = 75;
show_debug_overlay(true);
randomize();
global.debug = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State progression

if (status == 'listen') {
    pressed = 0;
    run_once = true;
    in_hand = s_count_state("hand", pool)
    endturn = 0;
    
    // Listen for keys corresponding to active cards.
    for (i = 1; i &lt; in_hand + 1; i++) {
        if (keyboard_check_pressed(ord(string(i)))) {
            pressed = 1 * i;
        }
    }
    endturn = keyboard_check_pressed(vk_space); // Force check for a combination.
    
    // Something was pressed.
    if (pressed &gt; 0) {
        status = 'action';
    } else if (endturn &gt; 0) {
        status = 'combine';
    }
} else if (status == 'action') {
    s_debug(status);
    status = 'action';
    index = 1;
    s_debug(pressed);
    for (i = 0; i &lt; ds_list_size(pool); i++) {
        if (pool[| i].state == 'hand') {
            if (pool[| i].type == 'end') status = 'combine';
            
            if (index == pressed) {
                s_add_to_node(nodes, pool[| i].object_index);
                s_debug(object_get_name(pool[| i].object_index));
                
                // Defaults for the adj array.
                var array;
                array[0] = -1;
                array[1] = -1;
                array[2] = -1;
                array[3] = -1;
                
                // Add top.
                if (ds_list_size(adj) &gt; 0) {
                    // Update the previous adjaceny to point to us.
                    updateadj = adj[| ds_list_size(adj) - 1];
                    updateadj[0] = ds_list_size(nodes) - 1;
                    adj[| ds_list_size(adj) - 1] = updateadj;
                    
                    // Relate to the previous. 
                    array[2] = ds_list_size(nodes) - 1;
                }
                ds_list_add(adj, array);

                // MISSING
                // Add right.
                // Set base node adjaceny.
                break;             
            } else index++;
            // End state reached.
            
        }
    }
   
    if (status != 'combine') status = 'discard';
  
} else if (status == 'start') {
    s_debug(status);
    status = 'listen';
        
    ds_list_shuffle(pool);
    s_change_status_type('hand', 'deck', pool, 'starter');
    s_change_status_type('hand', 'discard', pool, 'starter');
    
} else if (status == 'discard') {
    s_debug(status);
    status = 'shuffle';
    
    s_change_status('discard', 'hand', pool);
    
    if (ds_list_size(attacks) &gt; 0) {
        if (endturn &gt; 0) {
            status = 'start';
                     
            // I dunno why the fuck ds_list_clear didn't work for me.
            ds_list_clear(attacks);
        }
        else status = 'listenforattack';
    }

} else if (status == 'shuffle') {
    s_debug(status);
    status = 'deal';
    
    ds_list_shuffle(pool);
    
} else if (status == 'deal') {
    s_debug(status);
    status = 'listen';
    
    in_hand = s_count_state("hand", pool);
    s_change_status_type_max('hand', 'deck', pool, 'chain', (HAND_SIZE - in_hand));
    s_change_status_type_max('hand', 'deck', pool, 'end', (HAND_SIZE - in_hand));
    in_hand = s_count_state("hand", pool);
    
    if (in_hand &lt; HAND_SIZE &amp;&amp; run_once == true) {
        s_change_status('deck', 'discard', pool);
        status = 'deal';
        run_once = false;
    }
} else if (status == 'combine') {
    s_debug(status);
    
    // From source.
    nodestofollow = 1;
    followed = 0;
    node = 0;
    
    while (nodestofollow &gt; 0 &amp;&amp; ds_list_size(adj) &gt; 0) {

        if (node &gt; -1) {
            endnode = node;
            node = adj[| node];
            node = node[0];
        }
        
        if (node &gt; -1) nodestofollow = 1;
        else nodestofollow = 0;
        followed++;
    }
    
    if (followed &gt; 0 &amp;&amp; nodes[| endnode].type == 'end') {
        var attack = instance_create(x, y, o_card);
        attack.sprite_index = nodes[| endnode].sprite_index;
        attack.state = 'draw';
        attack.charge = 1;
        ds_list_add(attacks, attack);
    }
    status = 'discard';
    
} else if (status == 'listenforattack') {
    // Probably can separate this out to a different state engine eventually
    pressed = 0;
    endturn = 0;
    
    // Listen for keys corresponding to active attacks.
    for (i = 1; i &lt; ds_list_size(attacks) + 1; i++) {
        if (keyboard_check_pressed(ord(string(i))) &amp;&amp; attacks[| i - 1].charge &gt; 0) {
            pressed = 1 * i;
        }
    }
    endturn = keyboard_check_pressed(vk_space); 
    
    // Something was pressed.
    if (pressed &gt; 0) {
        selectedattack = attacks[| pressed - 1];
    } else if (endturn &gt; 0) {
        status = 'discard';
    }
    
    if (mouse_check_button(mb_left) &amp;&amp; selectedattack &gt; -1) {
        if (selectedattack.charge &gt; 0) {
            // Attack.
            selectedattack.charge--;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the HUD
// Simple setup.
x = view_xview[0];
y = view_yview[0];
w = view_wview[0];
h = view_hview[0];

// Main HUD background.
draw_set_font(fn_system);

draw_set_color(c_gray);
draw_rectangle(x,y,x + w,y + h/4,false);

// DONT LOOK AT ME! IM HORRIBLE DEBUGGING.
// TODO XXX REMOVE
draw_set_color(c_red);
draw_text(x, h/2, "In Hand: ");
draw_text(x + 90,h/2, s_count_state("hand", pool));

draw_text(x, h/2 + 30, "In Deck: ");
draw_text(x + 90,h/2 + 30, s_count_state("deck", pool));

draw_text(x, h/2 + 60, "Discard: ");
draw_text(x + 90,h/2 + 60, s_count_state("discard", pool));

index = 0;

if (status != 'listenforattack') {
    // Draw the actual cards.
    for (di = 0; di &lt; ds_list_size(pool); di++) {
        if (pool[| di].state == 'hand') {
            pool[| di].x = x + (w / 16 * (index * 4 + 1));
            pool[| di].y = y + (h / 24 * 1);
            index++;
        }
    }
} else {
    for(di = 0; di &lt; ds_list_size(attacks); di++) {
        attacks[| di].x = x + (w / 16 * (di * 4 + 1));
        attacks[| di].y = y + (h / 24 * 1);
        if (selectedattack == di) {
            draw_set_colour(c_red);
            draw_rectangle(attacks[| di].x, attacks[| di].y, attacks[| di].sprite_width, attacks[| di].sprite_height, true);
            draw_set_colour(c_white);
        }
        with (attacks[| di]) {
            draw_self();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
