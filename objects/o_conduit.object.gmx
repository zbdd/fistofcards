<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare new conduit
status = "sleep";

enemies = ds_list_create(); // 0 refers to selected enemy.
pool = ds_list_create(); // Available cards.
chains = ds_list_create(); // Chained cards.

// Prepare new chain
var main_chain = instance_create(x,y,o_chain);
ds_list_add(chains, main_chain);

HAND_SIZE = 3;
in_hand = 0;
in_deck = ds_list_size(pool);
in_discard = 0;
action_points = 1;
run_once = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State progression
randomize();

if (status == 'listen') {
    pressed = 0;
    action_points = 1;
    run_once = true;
    
    // Listen for keys corresponding to active cards.
    for (i = 1; i &lt; in_hand + 1; i++) {
        if (keyboard_check_pressed(ord(string(i)))) {
            pressed = 1 * i;
        }
    }
    
    // Something was pressed.
    if (pressed &gt; 0) {
        action_points--;
        status = 'action';
    }
} else if (status == 'action') {
    show_debug_message(status);
    status = 'action';
    i = 0;

    // Add a copy  of card to the chain.
    // More chains &gt; more attacks. (not implemented yet)
    for (j = 0; j &lt; ds_list_size(pool); j++) {
        if (pool[| j].state == 'hand') {
            if (i == pressed - 1) {
                ds_list_add(chains[| 0].chain, instance_create(x,y,pool[| j].object_index));
                break;
            } else {
                i++;
            }
        }
    }
   
    if (action_points &lt;= 0) status = 'discard';
    
} else if (status == 'start') {
    show_debug_message(status);
    status = 'listen';
        
    ds_list_shuffle(pool);
    in_hand = s_change_status_type('hand', 'deck', pool, 'starter');
    in_deck -= in_hand;
    
} else if (status == 'discard') {
    show_debug_message(status);
    status = 'shuffle';
    
    in_discard = s_change_status('discard', 'hand', pool);
    in_hand -= in_discard;

} else if (status == 'shuffle') {
    show_debug_message(status);
    status = 'deal';
    
    ds_list_shuffle(pool);
    
} else if (status == 'deal') {
    show_debug_message(status);
    status = 'listen';
    
    in_hand += s_change_status_type_max('hand', 'deck', pool, 'chain', (HAND_SIZE - in_hand));
    in_deck -= in_hand;
    
    if (in_hand &lt; HAND_SIZE &amp;&amp; run_once == true) {
        in_deck += s_change_status('deck', 'discard', pool);
        in_discard = 0;
        status = 'deal';
        run_once = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the HUD
// Simple setup.
x = view_xview[0];
y = view_yview[0];
w = view_wview[0];
h = view_hview[0];

// Main HUD background.
draw_set_font(fn_system);

draw_set_color(c_gray);
draw_rectangle(x,y,x + w,y + h/4,false);

// DONT LOOK AT ME! IM HORRIBLE DEBUGGING.
// TODO XXX REMOVE
draw_set_color(c_red);
draw_text(x, h/2, "In Hand: ");
draw_text(x + 90,h/2, s_count_state("hand", pool));

draw_text(x, h/2 + 30, "In Deck: ");
draw_text(x + 90,h/2 + 30, s_count_state("deck", pool));

draw_text(x, h/2 + 60, "Discard: ");
draw_text(x + 90,h/2 + 60, s_count_state("discard", pool));

index = 0;

// Draw the actual cards.
for (i = 0; i &lt; ds_list_size(pool); i++) {
    if (pool[| i].state == 'hand') {
        pool[| i].x = x + (w / 16 * (index * 4 + 1));
        pool[| i].y = y + (h / 24 * 1);
        index++;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
