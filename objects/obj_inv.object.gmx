<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//dev code TODO remove
random_set_seed(randomize());

allowed_slot[0] = true;
allowed_slot[1] = true;
allowed_slot[2] = false;
allowed_slot[3] = false;

card_at_slot[0] = false;
card_at_slot[1] = false;
card_at_slot[2] = false;
card_at_slot[3] = false;

TIME_RESET_DECK = 60 * 5;

alarm[0] = TIME_RESET_DECK;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset the deck
for (index = 0; index &lt; 4; index++) {
    if (card_at_slot[index]) {
        with (card_at_slot[index]) {
            instance_destroy();  
        }
        card_at_slot[index] = false;
    }
}

alarm[0] = TIME_RESET_DECK;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inv controls
if (alarm[0] &lt; 5) audio_play_sound(snd_deck_shuffle,10, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD
//background.
x = view_xview[0];
y = view_yview[0];
w = view_wview[0];
h = view_hview[0];

draw_set_color(c_gray);
draw_rectangle(x,y,x + w,y + h/4,false);

//default boxes for cards.
for (index = 0; index &lt; 4; index++) {
    draw_set_color(c_dkgray);
    sl[index] = draw_rectangle(x + (w / 16 * (index * 4 + 1)), y + (h / 24 * 1),
        x + (w / 16 * (index * 4 + 3)), y + (h / 24 * 5), false); 
    
    draw_set_font(fn_system);
    if (allowed_slot[index]) {
        if (!card_at_slot[index]) {  
            card_at_slot[index] = instance_create(x + (w / 16 * (index * 4 + 1)),y + (h / 24 * 1), random_card_selector());
            card_at_slot[index].cardnum = index + 1; 
        } else if (card_at_slot[index].played == true &amp;&amp; alarm[0]) {
            draw_set_color(c_red);
            tmptext[index] = draw_text(x + (w / 16 * (index * 4 + 2)), y + (h / 24 * 2), alarm[0]);
        } else {
            card_at_slot[index].x = x + (w / 16 * (index * 4 + 1));
            card_at_slot[index].y = y + (h / 24 * 1);
        }
    } else {
        if (!card_at_slot[index]) {
           tmp[index] = instance_create(x + (w / 16 * (index * 4 + 1)),y + (h / 24 * 1), obj_card_empty); 
        } else {
            tmp[index].x = x + (w / 16 * (index * 4 + 1));
            tmp[index].y = y + (h / 24 * 1);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
